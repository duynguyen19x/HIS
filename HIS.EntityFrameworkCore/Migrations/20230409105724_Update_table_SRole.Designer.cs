// <auto-generated />
using System;
using HIS.EntityFrameworkCore.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIS.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HIS_DbContext))]
    [Migration("20230409105724_Update_table_SRole")]
    partial class Update_table_SRole
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SCommune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationalId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SCommunes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SDistricts", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SNationals", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("SProvinces", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BranhId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CitizenIdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CitizenIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeinCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Join5Year")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PassPortDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassPortIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PassPortNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFather")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientMother")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("SPatients", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SPatientTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e7004b6b-df94-4acf-8e71-c2df0e50c62a"),
                            Code = "BHYT",
                            IsActive = true,
                            Name = "Bảo hiểm y tế"
                        },
                        new
                        {
                            Id = new Guid("30810954-5c1b-442f-a83c-a682a6dc8498"),
                            Code = "VP",
                            IsActive = true,
                            Name = "Viện phí"
                        },
                        new
                        {
                            Id = new Guid("707ac102-34c0-4bcf-92a8-d94b8aa815ff"),
                            Code = "DV",
                            IsActive = true,
                            Name = "Dịch vụ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SGenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a1840dc1-7d55-4495-a6cd-9a2392a67949"),
                            Code = 0,
                            Name = "Chưa xác định"
                        },
                        new
                        {
                            Id = new Guid("ca4e701b-c41a-4ea0-bdb4-3a36ae5f256c"),
                            Code = 1,
                            Name = "Nam"
                        },
                        new
                        {
                            Id = new Guid("12566b62-4210-464c-89a7-7fa5493297e6"),
                            Code = 2,
                            Name = "Nữ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterials", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SMedicineGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterialTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("MedicineTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineGroups", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineLines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicineTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SPermissions", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionId");

                    b.ToTable("SRolePermissionBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ServiceGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SServices", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("21716f6d-6204-493d-87c2-a326a8258dca"),
                            Code = "GB",
                            Name = "Giải phẫu bệnh lý"
                        },
                        new
                        {
                            Id = new Guid("9e2c9d3d-8767-47e9-82b1-b992d61daced"),
                            Code = "PT",
                            Name = "Phẫu thuật"
                        },
                        new
                        {
                            Id = new Guid("3df98174-2790-4a43-b13b-7989304b2265"),
                            Code = "KH",
                            Name = "Khám"
                        },
                        new
                        {
                            Id = new Guid("d4b4927b-f3dd-4f7d-9b5c-2c9da42c80f2"),
                            Code = "CN",
                            Name = "Thăm dò chức năng"
                        },
                        new
                        {
                            Id = new Guid("04c0fe0e-11a0-4497-a392-3c8736e354ad"),
                            Code = "PH",
                            Name = "Phục hồi chức năng"
                        },
                        new
                        {
                            Id = new Guid("47d2afe0-ee01-4c3e-a724-f74357959036"),
                            Code = "NS",
                            Name = "Nội soi"
                        },
                        new
                        {
                            Id = new Guid("0688de81-4c47-44ec-8cfb-9c211aa2c7bd"),
                            Code = "HA",
                            Name = "Chẩn đoán hình ảnh"
                        },
                        new
                        {
                            Id = new Guid("bfa51101-9dc6-4700-8bc8-a1d742b3091d"),
                            Code = "XN",
                            Name = "Xét nghiệm"
                        },
                        new
                        {
                            Id = new Guid("4b16d4a6-4915-4edd-ad72-bd43e3bf8ed6"),
                            Code = "TT",
                            Name = "Thủ thuật"
                        },
                        new
                        {
                            Id = new Guid("1d8cb668-4c88-4c44-bdc2-c10ceb877ec7"),
                            Code = "SA",
                            Name = "Siêu âm"
                        },
                        new
                        {
                            Id = new Guid("206fe63d-22e5-4aeb-a969-4fffffbd2908"),
                            Code = "AN",
                            Name = "Suất ăn"
                        },
                        new
                        {
                            Id = new Guid("57edd9c8-c8b1-4b13-ae31-f1a36e1f33aa"),
                            Code = "MA",
                            Name = "Máu"
                        },
                        new
                        {
                            Id = new Guid("a6c0aa77-541a-42a5-8165-72a0ca66239f"),
                            Code = "VT",
                            Name = "Vật tư"
                        },
                        new
                        {
                            Id = new Guid("d72834dd-8331-4965-ab12-651490811a4f"),
                            Code = "CL",
                            Name = "Khác"
                        },
                        new
                        {
                            Id = new Guid("be33598a-6379-4c4e-81c5-370b708ae7f5"),
                            Code = "TH",
                            Name = "Thuốc"
                        },
                        new
                        {
                            Id = new Guid("d23ec670-2560-445d-87e8-f07293dcbb77"),
                            Code = "GI",
                            Name = "Giường"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SServiceTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceUnits", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("STokens", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(1020)
                        .HasColumnType("nvarchar(1020)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UseType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("SUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("01a6016f-96a8-4b3e-a17d-3f8df4014933"),
                            Email = "administrator@gmail.com",
                            FirstName = "Admin",
                            LastName = "Administrator",
                            Password = "79956B61E1B250869A6716CE37EFD6E6",
                            Status = 1,
                            UseType = 0,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SUserRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SCommune", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", "District")
                        .WithMany("Communes")
                        .HasForeignKey("DistrictId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Communes")
                        .HasForeignKey("NationalId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("District");

                    b.Navigation("National");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Districts")
                        .HasForeignKey("NationalId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("National");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Provinces")
                        .HasForeignKey("NationalId");

                    b.Navigation("National");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatient", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SGender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", "PatientType")
                        .WithMany("SPatients")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", "SMaterialType")
                        .WithMany("SMaterials")
                        .HasForeignKey("MaterialTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMaterialType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", null)
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("SMedicineGroupId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", "SMedicineType")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SMedicineType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SBranch", "Branch")
                        .WithMany("RolePermissions")
                        .HasForeignKey("BranchId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", "SServiceGroup")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", "SServiceType")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SServiceGroup");

                    b.Navigation("SServiceType");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServiceTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SGender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.Navigation("Communes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", b =>
                {
                    b.Navigation("Communes");

                    b.Navigation("Districts");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.Navigation("Communes");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", b =>
                {
                    b.Navigation("SPatients");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SBranch", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SGender", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Navigation("SMaterials");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Navigation("SMedicineTypes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServiceTypes");

                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
