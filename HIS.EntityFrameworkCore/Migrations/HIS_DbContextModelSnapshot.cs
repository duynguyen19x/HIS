// <auto-generated />
using System;
using HIS.EntityFrameworkCore.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIS.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HIS_DbContext))]
    partial class HIS_DbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BranhId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("EthnicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FatherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeinCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentificationNumberIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("IdentificationNumberIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Join5Year")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("PassPortDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassPortIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PassPortNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFather")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientMother")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelativeAddress")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RelativeIdentificationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RelativeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RelativePhoneNumbar")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("SPatients", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("SPatientTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c94ab6ba-5955-4c21-9d9d-416588117a94"),
                            Code = "BHYT",
                            Inactive = false,
                            Name = "Bảo hiểm y tế"
                        },
                        new
                        {
                            Id = new Guid("d78bc647-2d40-41b2-b330-5385bfbe4229"),
                            Code = "VP",
                            Inactive = false,
                            Name = "Viện phí"
                        },
                        new
                        {
                            Id = new Guid("0251c635-dcc4-40a6-8023-d4bda5cb1f79"),
                            Code = "DV",
                            Inactive = false,
                            Name = "Dịch vụ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Treatment.STreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EthnicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InTimeClinical")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("STreatments", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterials", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SMedicineGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterialTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("MedicineTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineGroups", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineLines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicineTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SPermissions", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionId");

                    b.ToTable("SRolePermissionBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeInCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeInName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ServiceGroupHeInId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<Guid?>("SurgicalProcedureTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupHeInId");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("ServiceUnitId");

                    b.HasIndex("SurgicalProcedureTypeId");

                    b.ToTable("SServices", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("6433596a-f71a-4483-b1d6-72ef4710c7f9"),
                            Code = "XN-HH",
                            Inactive = false,
                            Name = "Xét nghiệm huyết học",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("6bd5b40c-1142-4881-9e65-2bb12c887d2f"),
                            Code = "XN-SH",
                            Inactive = false,
                            Name = "Xét nghiệm sinh hóa",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("aa435015-00ac-4063-b9d8-25b8afc8bd65"),
                            Code = "XN-VS",
                            Inactive = false,
                            Name = "Xét nghiệm vi sinh",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("2c81894b-b029-40d2-ba11-1781b9400fa9"),
                            Code = "XN-NT",
                            Inactive = false,
                            Name = "Xét nghiệm nước tiểu",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("62c9898b-c3fb-45f9-9a3a-64ba915c4d25"),
                            Code = "XN-DCD",
                            Inactive = false,
                            Name = "Dịch chọc dò",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("e4b10d90-b939-43ce-9465-37d7e4064ef2"),
                            Code = "GB",
                            Inactive = false,
                            Name = "Giải phẫu bệnh lý",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("7a0bc683-6e7e-480f-89b6-1b633bc4a5d7"),
                            Code = "PT",
                            Inactive = false,
                            Name = "Phẫu thuật",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("4e5cddfa-af78-4c73-b7b1-8ed30058b0fb"),
                            Code = "KH",
                            Inactive = false,
                            Name = "Khám",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("b11abc28-7dbc-4add-8d49-726c7572d824"),
                            Code = "TDCN-DND",
                            Inactive = false,
                            Name = "Điện não đồ",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("e3971ab1-210f-4663-9ed3-dab4b1efed01"),
                            Code = "TDCN-TTD",
                            Inactive = false,
                            Name = "Điện tâm đồ",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("780e750f-5bc8-4f0d-bc86-4cc0116a5351"),
                            Code = "PH",
                            Inactive = false,
                            Name = "Phục hồi chức năng",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("ce7f2711-3874-44f5-92ef-32eda93da8bc"),
                            Code = "TT",
                            Inactive = false,
                            Name = "Thủ thuật",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("dc4ba36b-56fa-4271-ad45-4e658120ba62"),
                            Code = "CDHA-NS",
                            Inactive = false,
                            Name = "Nội soi",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("ccbfde50-f639-4a69-a479-c78b11f0b499"),
                            Code = "CDHA-XQ",
                            Inactive = false,
                            Name = "XQuang thường",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("72a09264-64eb-47b8-a3c8-cac3f2a31193"),
                            Code = "CDHA-XQ-KTS",
                            Inactive = false,
                            Name = "XQuang kỹ thuật số",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = new Guid("4b6fcc13-6143-4a0e-962e-53844bd60686"),
                            Code = "CDHA-MRI",
                            Inactive = false,
                            Name = "Cộng hưởng từ",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = new Guid("4dbd730c-7aee-4e3c-bc6c-fc1918880bf5"),
                            Code = "CDHA-CT",
                            Inactive = false,
                            Name = "Cắt lớp vi tính"
                        },
                        new
                        {
                            Id = new Guid("52cb9264-8d47-4435-8014-6eba0bc3b89d"),
                            Code = "CDHA-SA",
                            Inactive = false,
                            Name = "Siêu âm thường",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = new Guid("726b8c63-bfc9-405f-89ae-2d950f303f6e"),
                            Code = "CDHA-SA-M",
                            Inactive = false,
                            Name = "Siêu âm màu",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = new Guid("735946f5-8c00-483b-8d23-384abc27030c"),
                            Code = "AN",
                            Inactive = false,
                            Name = "Suất ăn",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = new Guid("665b13f2-00cc-45f5-a3ad-e2074f7c8df0"),
                            Code = "MA",
                            Inactive = false,
                            Name = "Máu",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = new Guid("39085951-2171-4e1a-87f1-938c11eb6151"),
                            Code = "VT",
                            Inactive = false,
                            Name = "Vật tư",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = new Guid("66732353-c68f-4b72-aa19-bd908167f5b0"),
                            Code = "TH",
                            Inactive = false,
                            Name = "Thuốc",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = new Guid("fa491c1c-9e01-42c3-94fe-082b516accbe"),
                            Code = "GI",
                            Inactive = false,
                            Name = "Giường",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = new Guid("aa525f71-8af5-428a-b222-7b8b4e4ff4b2"),
                            Code = "VC",
                            Inactive = false,
                            Name = "Vận chuyển",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = new Guid("fe78f957-8977-43f4-9640-015eb4ddf1b3"),
                            Code = "CL",
                            Inactive = false,
                            Name = "Khác",
                            SortOrder = 25
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SServiceTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceUnits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("97951608-4915-4e34-a578-f5fc79e505ad"),
                            Code = "01",
                            Inactive = false,
                            Name = "Viên",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("e8439932-47e6-487e-898e-8631dbd45dea"),
                            Code = "02",
                            Inactive = false,
                            Name = "Lần",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("30fd6a09-2fc5-4046-9c3d-7058b3aff4d5"),
                            Code = "03",
                            Inactive = false,
                            Name = "Lọ",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("1188ca0e-9ac3-44e3-817c-847a26999a0b"),
                            Code = "04",
                            Inactive = false,
                            Name = "Tuýt",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("7b227bb3-7c04-49ce-b0c6-f3919382fa8c"),
                            Code = "05",
                            Inactive = false,
                            Name = "Ống",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("4efbf8ae-bdd8-45da-8bb3-14c9f0f91e6e"),
                            Code = "06",
                            Inactive = false,
                            Name = "Hộp",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("c8120273-3dda-404c-a447-cc5cabb30d33"),
                            Code = "07",
                            Inactive = false,
                            Name = "Tub",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("66846338-0d57-428c-9933-4e734b26f31c"),
                            Code = "08",
                            Inactive = false,
                            Name = "Gói",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("6957fe26-fd27-4acb-b27d-a6c803e8c4e6"),
                            Code = "09",
                            Inactive = false,
                            Name = "Cuộn",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("bcdca037-2e5d-423a-9952-67fc521b365e"),
                            Code = "10",
                            Inactive = false,
                            Name = "ml",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("1eef2b35-8cc5-4f8b-9118-018203fd3c03"),
                            Code = "11",
                            Inactive = false,
                            Name = "Lít",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("c3a08ab9-663a-4eb3-b112-babb59a64601"),
                            Code = "12",
                            Inactive = false,
                            Name = "Gam",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("f4e6ee3a-3164-4c2a-a1cd-71e860f049bf"),
                            Code = "13",
                            Inactive = false,
                            Name = "Kg",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("2a8869fd-0cea-47e2-b48f-7c2cb8b20d1c"),
                            Code = "14",
                            Inactive = false,
                            Name = "Met",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("e83b24d6-c2bb-4735-8cc2-f6c2cca8748f"),
                            Code = "15",
                            Inactive = false,
                            Name = "Minimet",
                            SortOrder = 9
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("STokens", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(1020)
                        .HasColumnType("nvarchar(1020)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UseType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("4d5bdea5-4a2c-4e6e-b6b4-58a1d78b1050"),
                            Email = "administrator@gmail.com",
                            FirstName = "Admin",
                            LastName = "Administrator",
                            Password = "79956B61E1B250869A6716CE37EFD6E6",
                            Status = 1,
                            UseType = 0,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SUserRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroupHeIns", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("81786062-3b8f-4916-bca6-bd98eb3d3ade"),
                            Code = "1",
                            Inactive = false,
                            Name = "Xét nghiệm",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("ba56d5cc-c5c8-422b-8973-30e07a60ca57"),
                            Code = "2",
                            Inactive = false,
                            Name = "Chẩn đoán hình ảnh",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("1521895a-753a-4468-aa45-f7c5d4d2e2ca"),
                            Code = "3",
                            Inactive = false,
                            Name = "Thăm dò chức năng",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("b85aeffc-cd8c-41b7-84f9-9b4b54433686"),
                            Code = "4",
                            Inactive = false,
                            Name = "Thuốc trong danh mục BHYT",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("f79303e8-570f-4c55-be1b-6aa6b8d88206"),
                            Code = "5",
                            Inactive = false,
                            Name = "Thuốc điều trị ung thư, chống thải ghép ngoài danh mục",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("5f649cce-a6c4-4131-8e18-ad6db3e93a1a"),
                            Code = "6",
                            Inactive = false,
                            Name = "Thuốc thanh toán theo tỷ lệ",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("19b25bfc-87c6-4128-8006-e12d328e50fd"),
                            Code = "7",
                            Inactive = false,
                            Name = "Máu và chế phẩm máu",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("2f358448-3962-4640-82e8-8bc71e6607f7"),
                            Code = "8",
                            Inactive = false,
                            Name = "Phẫu thuật",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("2cff84c3-b2ca-4a3e-8f4a-7d9b3b34a7e6"),
                            Code = "9",
                            Inactive = false,
                            Name = "DVKT thanh toán theo tỷ lệ",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("66cf0414-eac4-4988-a6fc-dd6a69c37648"),
                            Code = "10",
                            Inactive = false,
                            Name = "Vật tư y tế trong danh mục BHYT",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("3a050e31-f1c5-49ef-9a47-1ac6785737c6"),
                            Code = "11",
                            Inactive = false,
                            Name = "VTYT thanh toán theo tỷ lệ",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("9dff4b9d-b250-44c0-ab09-f8d8e9351555"),
                            Code = "12",
                            Inactive = false,
                            Name = "Vận chuyển",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("1a5ee1b9-3a90-4ed8-9266-06702df072f6"),
                            Code = "13",
                            Inactive = false,
                            Name = "Khám bệnh",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("2189b983-2064-4487-a99c-6bb78afcc0fa"),
                            Code = "14",
                            Inactive = false,
                            Name = "Giường điều trị ngoại trú",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("c32790a5-9f63-4594-9950-2949b6201835"),
                            Code = "15",
                            Inactive = false,
                            Name = "Giường điều trị nội trú",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = new Guid("97b47f59-98c6-4700-a892-4990511ccec3"),
                            Code = "16",
                            Inactive = false,
                            Name = "Ngày giường lưu",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = new Guid("b0756f95-ec78-47ff-8d76-6bbaa8f1f1bf"),
                            Code = "17",
                            Inactive = false,
                            Name = "Chế phẩm máu",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = new Guid("f7b495fc-a3a7-48df-a23b-c18bcd244f26"),
                            Code = "18",
                            Inactive = false,
                            Name = "Thủ thuật",
                            SortOrder = 18
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServicePricePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CeilingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OldUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SServicePricePolicies", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SSurgicalProcedureTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("d6dcfa41-1a20-4e57-9b7b-e88195172b37"),
                            Code = "PT-DB",
                            Name = "Phẫu thuật đặc biệt",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("68373bbc-ddf6-4094-b1ba-53835c4d278b"),
                            Code = "PT-1",
                            Name = "Phẫu thuật loại 1",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("ecfa4b60-2a32-4997-a00d-2292a8c3b513"),
                            Code = "PT-2",
                            Name = "Phẫu thuật loại 2",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("2f5bd512-57ea-4c7d-9432-7983ba5eb93b"),
                            Code = "PT-3",
                            Name = "Phẫu thuật loại 3",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("ce5ac5b9-39ea-4aeb-abf5-ccb9b39104db"),
                            Code = "TT-DB",
                            Name = "Thủ thuật đặc biệt",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("a0d68c86-c0b0-4c51-acf3-ceb201cf12bb"),
                            Code = "TT-1",
                            Name = "Thủ thuật loại 1",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("d38dc24b-464d-40b0-8e5f-73f68f37861e"),
                            Code = "TT-2",
                            Name = "Thủ thuật loại 2",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("6d35af6f-9833-42ca-9345-e9a7aad7d9e1"),
                            Code = "TT-3",
                            Name = "Thủ thuật loại 3",
                            SortOrder = 8
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCareer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SCareers", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SCountries", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("SDepartments", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SDepartmentTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SDistricts", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SEthnic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SEthnics", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SGenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3f8b0cbc-7b89-467c-9950-303bc2c5b6b8"),
                            Code = "None",
                            Inactive = false,
                            Name = "Chưa xác định"
                        },
                        new
                        {
                            Id = new Guid("3addca6b-aeb4-4833-8bf1-e04980b0ab9b"),
                            Code = "Male",
                            Inactive = false,
                            Name = "Nam"
                        },
                        new
                        {
                            Id = new Guid("ecf8d468-b917-49ab-ba5b-def5b0773db0"),
                            Code = "Female",
                            Inactive = false,
                            Name = "Nữ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SHospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SHospitals", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SIcd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapterCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChapterName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ChapterNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("MainGroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainGroupName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("MainGroupNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohReportCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameCommon")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup1Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubGroup1Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup1NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup2Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubGroup2Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup2NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TypeNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SIcds", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("SProvinces", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("RoomTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("SRooms", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SRoomTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SWard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("SWards", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatient", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", "Gender")
                        .WithMany("SPatients")
                        .HasForeignKey("GenderId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", "PatientType")
                        .WithMany("SPatients")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", "SMaterialType")
                        .WithMany("SMaterials")
                        .HasForeignKey("MaterialTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMaterialType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", null)
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("SMedicineGroupId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", "SMedicineType")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SMedicineType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", "SServiceGroupHeIn")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupHeInId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", "SServiceGroup")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", "SServiceType")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceUnitId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", "SSurgicalProcedureType")
                        .WithMany("SServices")
                        .HasForeignKey("SurgicalProcedureTypeId");

                    b.Navigation("SServiceGroup");

                    b.Navigation("SServiceGroupHeIn");

                    b.Navigation("SServiceType");

                    b.Navigation("SServiceUnit");

                    b.Navigation("SSurgicalProcedureType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServiceTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServicePricePolicy", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", "PatientType")
                        .WithMany("SServicePricePolicies")
                        .HasForeignKey("PatientTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SServicePricePolicies")
                        .HasForeignKey("ServiceId");

                    b.Navigation("PatientType");

                    b.Navigation("SService");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", "SBranch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", "SDepartmentType")
                        .WithMany("SDepartments")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SBranch");

                    b.Navigation("SDepartmentType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", "SDepartment")
                        .WithMany("SRooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", "SRoomType")
                        .WithMany("SRooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SDepartment");

                    b.Navigation("SRoomType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SWard", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("District");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", b =>
                {
                    b.Navigation("SPatients");

                    b.Navigation("SServicePricePolicies");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Navigation("SMaterials");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Navigation("SMedicineTypes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServicePricePolicies");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServiceTypes");

                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.Navigation("SRooms");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", b =>
                {
                    b.Navigation("SDepartments");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", b =>
                {
                    b.Navigation("SPatients");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", b =>
                {
                    b.Navigation("SRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
