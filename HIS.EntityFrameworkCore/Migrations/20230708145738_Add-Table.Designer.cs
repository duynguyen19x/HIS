// <auto-generated />
using System;
using HIS.EntityFrameworkCore.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIS.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HISDbContext))]
    [Migration("20230708145738_Add-Table")]
    partial class AddTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BranhId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("EthnicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FatherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeinCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("IdentificationNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentificationNumberIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime?>("IdentificationNumberIssuedDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Join5Year")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<DateTime?>("PassPortDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassPortIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PassPortNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFather")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientMother")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("RelativeAddress")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("RelativeIdentificationNumber")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("RelativeName")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("RelativePhoneNumbar")
                        .HasMaxLength(56)
                        .HasColumnType("nvarchar(56)");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("SPatients", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.HasKey("Id");

                    b.ToTable("SPatientTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a080ecaa-6cd6-459d-a450-d89351e0904d"),
                            Code = "BHYT",
                            Inactive = false,
                            Name = "Bảo hiểm y tế"
                        },
                        new
                        {
                            Id = new Guid("8522aa82-5b5e-4d46-a001-26bad813db10"),
                            Code = "VP",
                            Inactive = false,
                            Name = "Viện phí"
                        },
                        new
                        {
                            Id = new Guid("447fe0b2-6f08-4e1a-b456-ebc0ddb6feed"),
                            Code = "DV",
                            Inactive = false,
                            Name = "Dịch vụ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Treatment.STreatment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<Guid?>("CareerId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("EthnicId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("InTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InTimeClinical")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("OutTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("PatientId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("STreatments", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterials", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SMedicineGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterialTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("MedicineTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineGroups", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineLines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicineTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SPermissions", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionId");

                    b.ToTable("SRolePermissionBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("HeInCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("HeInName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ServiceGroupHeInId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.Property<int?>("SurgicalProcedureTypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupHeInId");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceUnitId");

                    b.HasIndex("SurgicalProcedureTypeId");

                    b.ToTable("SServices", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroups", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("a080ecaa-6cd6-459d-a450-d89351e0904d"),
                            Code = "XN-HH",
                            Inactive = false,
                            Name = "Xét nghiệm huyết học",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("33dd59d7-ab44-47fe-8b21-8500bf6e6cee"),
                            Code = "XN-HS",
                            Inactive = false,
                            Name = "Xét nghiệm hóa sinh",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("a13fa2cd-851c-4e89-a8ca-bdacee567757"),
                            Code = "XN-VS",
                            Inactive = false,
                            Name = "Xét nghiệm vi sinh",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("8878fb20-578e-46a6-8f61-62789c234bde"),
                            Code = "XN-NT",
                            Inactive = false,
                            Name = "Xét nghiệm nước tiểu",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("9414782a-9194-4801-91a0-253963a605eb"),
                            Code = "XN-DCD",
                            Inactive = false,
                            Name = "Dịch chọc dò",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("d4837941-9cc1-4f53-84f7-3e99edc8f508"),
                            Code = "XN-GPB",
                            Inactive = false,
                            Name = "Giải phẫu bệnh lý",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("9b9dfabb-abf9-4fea-b17a-6b5f2c3c01b1"),
                            Code = "XN-KHAC",
                            Inactive = false,
                            Name = "Xét nghiệm khác",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("e70f016c-39e7-4ded-aa20-9bffd9fadd59"),
                            Code = "PT",
                            Inactive = false,
                            Name = "Phẫu thuật",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("401dbb33-3eb1-44ae-8b3f-51e25996c311"),
                            Code = "KH",
                            Inactive = false,
                            Name = "Khám",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("1219fe7a-cecb-4a94-8fdc-2f6d0f48fbc9"),
                            Code = "TDCN-DND",
                            Inactive = false,
                            Name = "Điện não đồ",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("906307b7-f7e2-457a-a3d1-62a10ba9daa3"),
                            Code = "TDCN-DTD",
                            Inactive = false,
                            Name = "Điện tâm đồ",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("3b3ded9e-71ab-4d31-868c-a704d0604509"),
                            Code = "TDCN",
                            Inactive = false,
                            Name = "Phục hồi chức năng",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("0ddd75be-a32c-47f2-b5f1-5138b5997791"),
                            Code = "TT",
                            Inactive = false,
                            Name = "Thủ thuật",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("9f474388-e722-4ad2-b194-8a7d8def97fd"),
                            Code = "CDHA-NS",
                            Inactive = false,
                            Name = "Nội soi",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("17819944-bc22-47c5-afc3-108881fd5714"),
                            Code = "CDHA-XQ",
                            Inactive = false,
                            Name = "XQuang thường",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = new Guid("ff0073ef-be7c-46e1-adc3-99e58871f5c6"),
                            Code = "CDHA-KTS",
                            Inactive = false,
                            Name = "XQuang kỹ thuật số",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = new Guid("0711132b-d3a9-46d1-9ee1-74154facef37"),
                            Code = "CDHA-MRI",
                            Inactive = false,
                            Name = "Cộng hưởng từ",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = new Guid("4be0ad49-ac80-4a2b-9a92-03b3ffd4f3b6"),
                            Code = "CDHA-CT",
                            Inactive = false,
                            Name = "Cắt lớp vi tính",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = new Guid("914b8e89-4c56-4998-9707-def10fd23fbb"),
                            Code = "CDHA-SA",
                            Inactive = false,
                            Name = "Siêu âm thường",
                            SortOrder = 19
                        },
                        new
                        {
                            Id = new Guid("e43040fc-0e85-436c-8537-5c18e29f61da"),
                            Code = "CDHA-Doppler",
                            Inactive = false,
                            Name = "Siêu âm màu",
                            SortOrder = 20
                        },
                        new
                        {
                            Id = new Guid("12105142-6179-41c2-a56c-5364a2b852f5"),
                            Code = "SA",
                            Inactive = false,
                            Name = "Suất ăn",
                            SortOrder = 21
                        },
                        new
                        {
                            Id = new Guid("1fd09e01-450a-43ce-8bf4-c32aee87753d"),
                            Code = "MAU",
                            Inactive = false,
                            Name = "Máu",
                            SortOrder = 22
                        },
                        new
                        {
                            Id = new Guid("da2f4b6d-fd50-4cab-bebd-319458064222"),
                            Code = "CPM",
                            Inactive = false,
                            Name = "Chế phẩm máu",
                            SortOrder = 23
                        },
                        new
                        {
                            Id = new Guid("964200b8-4ae6-434d-a461-909391444b40"),
                            Code = "VTYT",
                            Inactive = false,
                            Name = "Vật tư",
                            SortOrder = 24
                        },
                        new
                        {
                            Id = new Guid("b4573fb1-32a6-45e3-9782-07066d090a5c"),
                            Code = "THUOC",
                            Inactive = false,
                            Name = "Thuốc",
                            SortOrder = 25
                        },
                        new
                        {
                            Id = new Guid("998836b2-3b5b-4c1c-9b4b-7f6cc1e52b74"),
                            Code = "GI",
                            Inactive = false,
                            Name = "Giường",
                            SortOrder = 26
                        },
                        new
                        {
                            Id = new Guid("3b082a29-237d-4926-8209-f2876d292189"),
                            Code = "VC",
                            Inactive = false,
                            Name = "Vận chuyển",
                            SortOrder = 27
                        },
                        new
                        {
                            Id = new Guid("0a5a8dc0-67a7-41e9-8fb3-1f5e6f8d874d"),
                            Code = "KHAC",
                            Inactive = false,
                            Name = "Khác",
                            SortOrder = 28
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceUnits", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c587599c-a6a6-454f-8e30-2a92dac6f588"),
                            Code = "VIEN",
                            Inactive = false,
                            Name = "Viên",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("6cc9258a-5f48-4c22-8cd6-61c0795f5405"),
                            Code = "LAN",
                            Inactive = false,
                            Name = "Lần",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("ae0ece26-bb4c-4b23-95cb-1a5d66114634"),
                            Code = "LO",
                            Inactive = false,
                            Name = "Lọ",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("da514a31-4dfc-4445-99bd-4ae29359ad48"),
                            Code = "TUYT",
                            Inactive = false,
                            Name = "Tuýt",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("44ab6ffc-f1a9-47d0-90ab-9f09d767c286"),
                            Code = "ONG",
                            Inactive = false,
                            Name = "Ống",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("0762aebf-cbb8-4102-b923-a30df490f75d"),
                            Code = "6",
                            Inactive = false,
                            Name = "Hộp",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("7a0fed4a-e62a-4e9f-8e92-7332127ca248"),
                            Code = "TUB",
                            Inactive = false,
                            Name = "Tub",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("9ff4f404-68bd-4780-99bc-1033227cbe3d"),
                            Code = "GOI",
                            Inactive = false,
                            Name = "Gói",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("2198d1c0-57fa-453f-b605-9cef55929067"),
                            Code = "CUON",
                            Inactive = false,
                            Name = "Cuộn",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("bf42cbf7-b5ac-4503-b73d-d91f4051fa8f"),
                            Code = "ML",
                            Inactive = false,
                            Name = "ml",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("9e12370e-b3ce-4862-8e7d-83d8f7ec56d1"),
                            Code = "11",
                            Inactive = false,
                            Name = "Lít",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("3be8bc27-3940-451c-87f5-c062df716872"),
                            Code = "GAM",
                            Inactive = false,
                            Name = "Gam",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("cc8713c1-536a-4835-bd7e-187603566f95"),
                            Code = "KG",
                            Inactive = false,
                            Name = "Kg",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("49793db4-c0ce-43c1-b439-eacd554fa06e"),
                            Code = "MET",
                            Inactive = false,
                            Name = "Met",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("a7e37e54-47b8-4716-b493-b657d4981e35"),
                            Code = "MINI",
                            Inactive = false,
                            Name = "Minimet",
                            SortOrder = 15
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("STokens", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(1020)
                        .HasColumnType("nvarchar(1020)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UseType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WardId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.ToTable("SUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3382be1c-2836-4246-99db-c4e1c781e868"),
                            Email = "administrator@gmail.com",
                            FirstName = "Admin",
                            LastName = "Administrator",
                            Password = "79956B61E1B250869A6716CE37EFD6E6",
                            Status = 1,
                            UseType = 0,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SUserRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroupHeIns", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("45e3f5de-4096-4944-a6b6-69b829b0f61f"),
                            Code = "XN",
                            Inactive = false,
                            Name = "Xét nghiệm",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("b2e25f8f-ea5b-4255-b2d8-379bd50a5160"),
                            Code = "CDHA",
                            Inactive = false,
                            Name = "Chẩn đoán hình ảnh",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = new Guid("7a871ff7-c167-4fc8-b652-0aa2ecd72444"),
                            Code = "TDCN",
                            Inactive = false,
                            Name = "Thăm dò chức năng",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = new Guid("7d39f21a-3f78-4c5a-b288-02532a9769d7"),
                            Code = "THUOC-BHYT",
                            Inactive = false,
                            Name = "Thuốc trong danh mục BHYT",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = new Guid("90adcfc5-7518-46e2-995f-d304c31583b5"),
                            Code = "THUOC-NgBHYT",
                            Inactive = false,
                            Name = "Thuốc điều trị ung thư, chống thải ghép ngoài danh mục",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = new Guid("53bf47c7-1414-47cf-8c88-5ba96aa2c978"),
                            Code = "THUOC-TT",
                            Inactive = false,
                            Name = "Thuốc thanh toán theo tỷ lệ",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = new Guid("8a6eee59-ecb3-4bea-89cd-1a83b2d8edd6"),
                            Code = "MAU",
                            Inactive = false,
                            Name = "Máu",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = new Guid("8c7964ad-f476-4009-a630-a14de7f982d6"),
                            Code = "PT",
                            Inactive = false,
                            Name = "Phẫu thuật",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = new Guid("7c84bd56-f322-477c-b64d-50655cbc06e5"),
                            Code = "DVKT-TL",
                            Inactive = false,
                            Name = "DVKT thanh toán theo tỷ lệ",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = new Guid("8a360961-1c49-4382-a7ce-ce70358ae25a"),
                            Code = "VTYT-BHYT",
                            Inactive = false,
                            Name = "Vật tư y tế trong danh mục BHYT",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = new Guid("8868dfd1-fbc7-40c2-83b1-cb0f894cf566"),
                            Code = "VTYT-TT",
                            Inactive = false,
                            Name = "VTYT thanh toán theo tỷ lệ",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = new Guid("81a882db-d465-402f-a391-d3726d698950"),
                            Code = "VC",
                            Inactive = false,
                            Name = "Vận chuyển",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = new Guid("75b2f46f-f841-4cbe-9513-93c44306e78e"),
                            Code = "KHAM",
                            Inactive = false,
                            Name = "Khám bệnh",
                            SortOrder = 13
                        },
                        new
                        {
                            Id = new Guid("675d16db-cd35-4229-b042-82aef4718aff"),
                            Code = "14",
                            Inactive = false,
                            Name = "Giường điều trị ngoại trú",
                            SortOrder = 14
                        },
                        new
                        {
                            Id = new Guid("156ec951-453d-4e3f-800e-33f850942874"),
                            Code = "GI-NT",
                            Inactive = false,
                            Name = "Giường điều trị nội trú",
                            SortOrder = 15
                        },
                        new
                        {
                            Id = new Guid("22048fa7-a9e4-4ac7-89a6-e9e34e4811b4"),
                            Code = "GI-LUU",
                            Inactive = false,
                            Name = "Ngày giường lưu",
                            SortOrder = 16
                        },
                        new
                        {
                            Id = new Guid("7802d629-9e6a-48a7-825c-c91f530785ac"),
                            Code = "CPM",
                            Inactive = false,
                            Name = "Chế phẩm máu",
                            SortOrder = 17
                        },
                        new
                        {
                            Id = new Guid("199b0c88-0ef5-475c-a426-c0547cd13443"),
                            Code = "TT",
                            Inactive = false,
                            Name = "Thủ thuật",
                            SortOrder = 18
                        },
                        new
                        {
                            Id = new Guid("dc75e4bb-6e85-4a90-ae29-112b7d2873f9"),
                            Code = "VTYT-NgBHYT",
                            Inactive = false,
                            Name = "Vật tư y tế ngoài danh mục BHYT",
                            SortOrder = 19
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServicePricePolicy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("CeilingPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExecutionTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("NewUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("OldUnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("PaymentRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PatientTypeId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SServicePricePolicies", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SSurgicalProcedureTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "PTDB",
                            Name = "Phẫu thuật đặc biệt",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "PT01",
                            Name = "Phẫu thuật loại 1",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "PT02",
                            Name = "Phẫu thuật loại 2",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "PT03",
                            Name = "Phẫu thuật loại 3",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "TTDB",
                            Name = "Thủ thuật đặc biệt",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "TT01",
                            Name = "Thủ thuật loại 1",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "TT02",
                            Name = "Thủ thuật loại 2",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "TT03",
                            Name = "Thủ thuật loại 3",
                            SortOrder = 8
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCareer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SCareers", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SCountries", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DepartmentTypeId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("DepartmentTypeId");

                    b.ToTable("SDepartments", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SDepartmentTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "LS",
                            Inactive = false,
                            Name = "Khoa lâm sàng",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "CLS",
                            Inactive = false,
                            Name = "Khoa cận lâm sàng",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "DUOC",
                            Inactive = false,
                            Name = "Khoa dược",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "KHTH",
                            Inactive = false,
                            Name = "Kế hoạch tổng hợp",
                            SortOrder = 4
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SDistricts", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SEthnic", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SEthnics", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SExecutionRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsMain")
                        .HasColumnType("bit");

                    b.Property<Guid?>("RoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoomId");

                    b.HasIndex("ServiceId");

                    b.ToTable("SExecutionRooms", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SGenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("97ac7fd8-edfa-4243-97fc-98468f492df1"),
                            Code = "KXD",
                            Inactive = false,
                            Name = "Chưa xác định",
                            SortOrder = 0
                        },
                        new
                        {
                            Id = new Guid("fc153433-bf89-4e95-8523-df3d8cec8676"),
                            Code = "NAM",
                            Inactive = false,
                            Name = "Nam",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = new Guid("e9497984-d355-41af-b917-091500956be9"),
                            Code = "NU",
                            Inactive = false,
                            Name = "Nữ",
                            SortOrder = 2
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SHospital", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Grade")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Line")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SHospitals", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SIcd", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChapterCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ChapterName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("ChapterNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("MainGroupCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("MainGroupName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("MainGroupNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohReportCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameCommon")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup1Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubGroup1Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup1NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup2Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("SubGroup2Name")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("SubGroup2NameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TypeCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("TypeName")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<string>("TypeNameEnglish")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.ToTable("SIcds", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("SProvinces", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DepartmentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MohCode")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("RoomTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("RoomTypeId");

                    b.ToTable("SRooms", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<int?>("SortOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SRoomTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Code = "TD",
                            Inactive = false,
                            Name = "Tiếp đón",
                            SortOrder = 1
                        },
                        new
                        {
                            Id = 2,
                            Code = "HC",
                            Inactive = false,
                            Name = "Hành chính",
                            SortOrder = 2
                        },
                        new
                        {
                            Id = 3,
                            Code = "KHAM",
                            Inactive = false,
                            Name = "Khám bệnh",
                            SortOrder = 3
                        },
                        new
                        {
                            Id = 4,
                            Code = "NT",
                            Inactive = false,
                            Name = "Nội trú",
                            SortOrder = 4
                        },
                        new
                        {
                            Id = 5,
                            Code = "NgT",
                            Inactive = false,
                            Name = "Ngoại trú",
                            SortOrder = 5
                        },
                        new
                        {
                            Id = 6,
                            Code = "XN",
                            Inactive = false,
                            Name = "Xét nghiệm",
                            SortOrder = 6
                        },
                        new
                        {
                            Id = 7,
                            Code = "CDHA",
                            Inactive = false,
                            Name = "Chẩn đoán hình ảnh",
                            SortOrder = 7
                        },
                        new
                        {
                            Id = 8,
                            Code = "KHO-TONG",
                            Inactive = false,
                            Name = "Kho tổng",
                            SortOrder = 8
                        },
                        new
                        {
                            Id = 9,
                            Code = "KHO-NgT",
                            Inactive = false,
                            Name = "Kho ngoại trú",
                            SortOrder = 9
                        },
                        new
                        {
                            Id = 10,
                            Code = "KHO-NT",
                            Inactive = false,
                            Name = "Kho nội trú",
                            SortOrder = 10
                        },
                        new
                        {
                            Id = 11,
                            Code = "TT",
                            Inactive = false,
                            Name = "Tủ trực",
                            SortOrder = 11
                        },
                        new
                        {
                            Id = 12,
                            Code = "QLT",
                            Inactive = false,
                            Name = "Quản lý thuốc",
                            SortOrder = 12
                        },
                        new
                        {
                            Id = 13,
                            Code = "QLVT",
                            Inactive = false,
                            Name = "Quản lý vật tư",
                            SortOrder = 13
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SWard", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Inactive")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDelete")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.ToTable("SWards", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatient", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", "Gender")
                        .WithMany("SPatients")
                        .HasForeignKey("GenderId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", "PatientType")
                        .WithMany("SPatients")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", "SMaterialType")
                        .WithMany("SMaterials")
                        .HasForeignKey("MaterialTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SMaterialType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", null)
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("SMedicineGroupId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", "SMedicineType")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SMedicineLine");

                    b.Navigation("SMedicineType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("MedicineLineId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SMedicineLine");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", "SServiceGroupHeIn")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupHeInId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", "SServiceGroup")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", "SSurgicalProcedureType")
                        .WithMany("SServices")
                        .HasForeignKey("SurgicalProcedureTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SServiceGroup");

                    b.Navigation("SServiceGroupHeIn");

                    b.Navigation("SServiceUnit");

                    b.Navigation("SSurgicalProcedureType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServicePricePolicy", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", "PatientType")
                        .WithMany("SServicePricePolicies")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SServicePricePolicies")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("PatientType");

                    b.Navigation("SService");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", "SBranch")
                        .WithMany("Departments")
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", "SDepartmentType")
                        .WithMany("SDepartments")
                        .HasForeignKey("DepartmentTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SBranch");

                    b.Navigation("SDepartmentType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SExecutionRoom", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", "Room")
                        .WithMany("ExecutionRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "Service")
                        .WithMany("ExecutionRooms")
                        .HasForeignKey("ServiceId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Room");

                    b.Navigation("Service");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", "Country")
                        .WithMany("Provinces")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Country");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", "SDepartment")
                        .WithMany("SRooms")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", "SRoomType")
                        .WithMany("SRooms")
                        .HasForeignKey("RoomTypeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("SDepartment");

                    b.Navigation("SRoomType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SWard", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", "District")
                        .WithMany("Wards")
                        .HasForeignKey("DistrictId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("District");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Business.Patients.SPatientType", b =>
                {
                    b.Navigation("SPatients");

                    b.Navigation("SServicePricePolicies");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Navigation("SMaterials");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Navigation("SMedicineTypes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Navigation("ExecutionRooms");

                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServicePricePolicies");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SServiceGroupHeIn", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Services.SSurgicalProcedureType", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SBranch", b =>
                {
                    b.Navigation("Departments");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SCountry", b =>
                {
                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartment", b =>
                {
                    b.Navigation("SRooms");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDepartmentType", b =>
                {
                    b.Navigation("SDepartments");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SDistrict", b =>
                {
                    b.Navigation("Wards");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SGender", b =>
                {
                    b.Navigation("SPatients");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SProvince", b =>
                {
                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoom", b =>
                {
                    b.Navigation("ExecutionRooms");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Dictionaries.SRoomType", b =>
                {
                    b.Navigation("SRooms");
                });
#pragma warning restore 612, 618
        }
    }
}
