// <auto-generated />
using System;
using HIS.EntityFrameworkCore.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HIS.EntityFrameworkCore.Migrations
{
    [DbContext(typeof(HIS_DbContext))]
    [Migration("20230409053735_Add-SNational-SProvince-SDistrict-SCommune")]
    partial class AddSNationalSProvinceSDistrictSCommune
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SCommune", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("DistrictId");

                    b.HasIndex("NationalId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SCommunes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.HasIndex("ProvinceId");

                    b.ToTable("SDistricts", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SNationals", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("IsAcctive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("NationalId");

                    b.ToTable("SProvinces", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatient", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("BranhId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CitizenIdDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CitizenIdIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("CitizenIdNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CommuneId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DOB")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DistrictId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FatherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("FullName")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("HeinCardId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("JobId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Join5Year")
                        .HasColumnType("datetime2");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Mobile")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MotherEducationalLevel")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("PassPortDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("PassPortIssuedBy")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("PassPortNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientFather")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<string>("PatientMother")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)");

                    b.Property<Guid>("PatientTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TaxCode")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.HasIndex("PatientTypeId");

                    b.ToTable("SPatients", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SPatientTypes", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("3a2443d2-4b80-454b-8903-f06977bc81b0"),
                            Code = "BHYT",
                            IsActive = true,
                            Name = "Bảo hiểm y tế"
                        },
                        new
                        {
                            Id = new Guid("6f4d2e11-1212-4d25-823c-ec05eae1d19b"),
                            Code = "VP",
                            IsActive = true,
                            Name = "Viện phí"
                        },
                        new
                        {
                            Id = new Guid("448b1158-d30a-4dc4-84c6-d043bf7f3297"),
                            Code = "DV",
                            IsActive = true,
                            Name = "Dịch vụ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SBranch", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SGender", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Code")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("SGenders", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("38fa53ab-649d-44f8-ab29-a0406b79dc10"),
                            Code = 0,
                            Name = "Chưa xác định"
                        },
                        new
                        {
                            Id = new Guid("72122296-f4dc-4c6a-94d0-8731d5f549d4"),
                            Code = 1,
                            Name = "Nam"
                        },
                        new
                        {
                            Id = new Guid("08e12bb9-7e32-4d4c-a02a-9ab705ba8bf8"),
                            Code = 2,
                            Name = "Nữ"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MaterialTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("MaterialTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterials", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("SMedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("SMedicineGroupId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMaterialTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpQuantity")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<decimal?>("TaxRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("MedicineTypeId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineGroups", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SMedicineLines", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<decimal?>("ImpPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("ImpVatRate")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal?>("InternalPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("MedicineGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("MedicineLineId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("NationalId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ParentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.Property<string>("Tutorial")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.HasIndex("MedicineLineId");

                    b.HasIndex("ServiceId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SMedicineTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.HasKey("Id");

                    b.ToTable("SPermissions", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Description")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.ToTable("SRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("PermissionId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("BranchId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("RoleId", "PermissionId");

                    b.HasIndex("BranchId");

                    b.HasIndex("PermissionId");

                    b.ToTable("SRolePermissionBranchs", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid>("ServiceGroupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("ServiceTypeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceGroupId");

                    b.HasIndex("ServiceTypeId");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SServices", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("SServiceGroup");

                    b.HasData(
                        new
                        {
                            Id = new Guid("fc995d4d-a100-4cc8-abd4-e29be31f1dfd"),
                            Code = "GB",
                            Name = "Giải phẫu bệnh lý"
                        },
                        new
                        {
                            Id = new Guid("2e0ca60e-541c-4e66-a4ab-166b8fb57756"),
                            Code = "PT",
                            Name = "Phẫu thuật"
                        },
                        new
                        {
                            Id = new Guid("2bc052d9-cf26-4e50-8eb6-eb84d4a67cc7"),
                            Code = "KH",
                            Name = "Khám"
                        },
                        new
                        {
                            Id = new Guid("d6173499-045e-4e12-92b5-5135523da177"),
                            Code = "CN",
                            Name = "Thăm dò chức năng"
                        },
                        new
                        {
                            Id = new Guid("098769b8-7e8d-4527-88d4-24de84e20cec"),
                            Code = "PH",
                            Name = "Phục hồi chức năng"
                        },
                        new
                        {
                            Id = new Guid("60d90a6d-9fff-472b-9182-1397b95a8c1a"),
                            Code = "NS",
                            Name = "Nội soi"
                        },
                        new
                        {
                            Id = new Guid("54f518ad-3ed5-4cd3-98cb-dd474f91eb52"),
                            Code = "HA",
                            Name = "Chẩn đoán hình ảnh"
                        },
                        new
                        {
                            Id = new Guid("7a0a9cfe-f241-44bc-aca8-6aa8bcfb0f04"),
                            Code = "XN",
                            Name = "Xét nghiệm"
                        },
                        new
                        {
                            Id = new Guid("19eecc0f-5674-4e10-8b24-f1188b0bc32e"),
                            Code = "TT",
                            Name = "Thủ thuật"
                        },
                        new
                        {
                            Id = new Guid("4b3dc68e-0e3d-412e-b7df-d3bb0bfadc1d"),
                            Code = "SA",
                            Name = "Siêu âm"
                        },
                        new
                        {
                            Id = new Guid("2fbde5d3-49f8-4826-96bb-b24dca6c74e8"),
                            Code = "AN",
                            Name = "Suất ăn"
                        },
                        new
                        {
                            Id = new Guid("490a7272-9277-4b6e-a857-ea7b2fd799c4"),
                            Code = "MA",
                            Name = "Máu"
                        },
                        new
                        {
                            Id = new Guid("41ecdb46-bbe8-4a1d-9ec4-ea042092c3cf"),
                            Code = "VT",
                            Name = "Vật tư"
                        },
                        new
                        {
                            Id = new Guid("ff8d78c5-7507-44df-b2ce-48ced0fbe9ac"),
                            Code = "CL",
                            Name = "Khác"
                        },
                        new
                        {
                            Id = new Guid("b481dacb-285d-4da7-926d-96bbc70e5e4e"),
                            Code = "TH",
                            Name = "Thuốc"
                        },
                        new
                        {
                            Id = new Guid("d7dbd5f5-2a42-4aae-a14c-bb9239e55eea"),
                            Code = "GI",
                            Name = "Giường"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<Guid?>("CreatedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("DeleteBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("DeleteDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ModifiedBy")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("ServiceUnitId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceUnitId");

                    b.ToTable("SServiceTypes", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Code")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("SoftOrder")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("SServiceUnits", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiredAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRevoked")
                        .HasColumnType("bit");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssueAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Jti")
                        .HasMaxLength(125)
                        .HasColumnType("nvarchar(125)");

                    b.Property<string>("TokenValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("STokens", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<Guid?>("District")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("GenderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("Password")
                        .HasMaxLength(1020)
                        .HasColumnType("nvarchar(1020)");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<Guid?>("ProvinceId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("UseType")
                        .HasColumnType("int");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid?>("WardsId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("GenderId");

                    b.ToTable("SUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("21abc3ec-cce8-4dd7-be88-63c3ca9767a6"),
                            Email = "administrator@gmail.com",
                            FirstName = "Admin",
                            LastName = "Administrator",
                            Password = "79956B61E1B250869A6716CE37EFD6E6",
                            Status = 1,
                            UseType = 0,
                            UserName = "Administrator"
                        });
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.Property<Guid?>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("SUserRoles", (string)null);
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SCommune", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", "District")
                        .WithMany("Communes")
                        .HasForeignKey("DistrictId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Communes")
                        .HasForeignKey("NationalId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", "Province")
                        .WithMany("Communes")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("District");

                    b.Navigation("National");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Districts")
                        .HasForeignKey("NationalId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", "Province")
                        .WithMany("Districts")
                        .HasForeignKey("ProvinceId");

                    b.Navigation("National");

                    b.Navigation("Province");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", "National")
                        .WithMany("Provinces")
                        .HasForeignKey("NationalId");

                    b.Navigation("National");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatient", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SGender", "Gender")
                        .WithMany("Patients")
                        .HasForeignKey("GenderId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", "PatientType")
                        .WithMany("SPatients")
                        .HasForeignKey("PatientTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Gender");

                    b.Navigation("PatientType");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterial", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", "SMaterialType")
                        .WithMany("SMaterials")
                        .HasForeignKey("MaterialTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterials")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMaterialType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", null)
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("SMedicineGroupId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMaterialTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicine", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", "SMedicineType")
                        .WithMany("SMedicines")
                        .HasForeignKey("MedicineTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicines")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SMedicineType");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", "SMedicineLine")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("MedicineLineId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SService", "SService")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SMedicineTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SMedicineLine");

                    b.Navigation("SService");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRolePermissionBranch", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SBranch", "Branch")
                        .WithMany("RolePermissions")
                        .HasForeignKey("BranchId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SPermission", "Permission")
                        .WithMany("RolePermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("RolePermissions")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Permission");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", "SServiceGroup")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", "SServiceType")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceTypeId");

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServices")
                        .HasForeignKey("ServiceUnitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SServiceGroup");

                    b.Navigation("SServiceType");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", "SServiceUnit")
                        .WithMany("SServiceTypes")
                        .HasForeignKey("ServiceUnitId");

                    b.Navigation("SServiceUnit");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SToken", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SGender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.Navigation("Gender");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUserRole", b =>
                {
                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SRole", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HIS.EntityFrameworkCore.Entities.Categories.SUser", "User")
                        .WithMany("UserRoles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SDistrict", b =>
                {
                    b.Navigation("Communes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SNational", b =>
                {
                    b.Navigation("Communes");

                    b.Navigation("Districts");

                    b.Navigation("Provinces");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Others.SProvince", b =>
                {
                    b.Navigation("Communes");

                    b.Navigation("Districts");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.Patients.SPatientType", b =>
                {
                    b.Navigation("SPatients");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SBranch", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SGender", b =>
                {
                    b.Navigation("Patients");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMaterialType", b =>
                {
                    b.Navigation("SMaterials");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineGroup", b =>
                {
                    b.Navigation("SMedicineTypes");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineLine", b =>
                {
                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SMedicineType", b =>
                {
                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SPermission", b =>
                {
                    b.Navigation("RolePermissions");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SRole", b =>
                {
                    b.Navigation("RolePermissions");

                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SService", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceGroup", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceType", b =>
                {
                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SServiceUnit", b =>
                {
                    b.Navigation("SMaterialTypes");

                    b.Navigation("SMaterials");

                    b.Navigation("SMedicineTypes");

                    b.Navigation("SMedicines");

                    b.Navigation("SServiceTypes");

                    b.Navigation("SServices");
                });

            modelBuilder.Entity("HIS.EntityFrameworkCore.Entities.Categories.SUser", b =>
                {
                    b.Navigation("UserRoles");

                    b.Navigation("UserTokens");
                });
#pragma warning restore 612, 618
        }
    }
}
